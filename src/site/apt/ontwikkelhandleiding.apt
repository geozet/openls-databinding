	 -----
	 Ontwikkelhandleiding PDOK open location service databinding
	 -----
	 prinsmc@minlnv.nl
	 -----
	 2 aug 2010
	 -----

~~ http://maven.apache.org/doxia/references/apt-format.html


Ontwikkel handleiding

<Note: this document is out of date>

%{toc|section=1|fromDepth=0|toDepth=2}

* {Broncode ophalen}

  De broncode is opgeslagen in het Subversion systeem. De toegang is beschreven in het 
  {{{./source-repository.html}Source Repository}} document.
  Om gebruik te maken van het eclipse project is het van belang dat je uitpakt naar 
  <<<C:\workspace\nl.geozet.openls-databinding-TRUNK>>>.

+----+
  svn checkout http://www.duif.net/geozet/trunk/openls-databinding C:\workspace\nl.geozet.openls-databinding-TRUNK
+----+
  
* {Beginnen met bouwen}

  Het project gebruikt Maven 2.2 als build tool en eclipse 3.6 met de Subversive en Maven 
  Integration plugins als ide; alle Maven commando's moeten in de root van het project worden uitgevoerd; 
  in pricipe zorgt de m2eclipse plugin voor de afhandeling van de maven commando's voor oa. build.
  Het project is opgezet als een jar artifact. Voor het maken van een .jar of release is alleen een juist geconfigureerde Maven installatie nodig.
  Van belang hierbij is dat in de <<<settings.xml>>> een server entry staat voor de duif.net repository zoals hieronder.

+----+
<server>
  <id>duif-repo</id>
  <username>jouw svn user</username>
  <password>jouw svn pass</password>
</server>
+----+  

  Zonder deze entry kun je geen releases doen en ook de gerelateerde maven artifacten niet ophalen
  
**{Maven commando's}  
  
+----+
mvn package
+----+  
  
  Dit draait alle unit tests en maakt de artifact(en) bestanden aan die 
  direct naar de ontwikkelserver kunnen worden gerold voor deploy. 

+----+
mvn clean scm:update site-deploy install
+----+  
  
  Dit doet een clean en update actie waarna de volledige build en packaging wordt uitgevoerd en 
  de documentatie wordt gegenereerd.
  
* {Issue's oplossen}

  In principe worden alle issues in {{{./issue-tracking.html}Mantis}} vastgelegd; optioneel kun je de 
  echte highlights in de {{{./releasenotes.html}releasenotes}} vastleggen. 
  
* {Versie nummering}

  Opleveringen hebben versienummers beginnend bij 1.0, bij bugfixes wordt het cijfer achter de punt opgehoogd.
  Optioneel kunnen er pre-releases worden opgeleverd, die worden aangegeven met 0.1, 0.2 etc.
  Alle versies kunnen worden bekeken in Mantis?? Hudson?? 
  ({{{http://#:9090/}Versions}})

* {Release bouwen}

  Met de volgende stappen kun je een release bouwen; gebruik hiervoor het profiel <<<release>>>
  In principe worden alleen <<<tags>>> gebruikt omdat iedere nieuwe oplevering een tag krijgt (<in tags mage je dus niets meer inchecken!>
  maak daar een branch voor aan). 
  Voordat je verder gaat zorg je dat alles is ingechecked in subversion en dat de release is vrijgegeven 
  in mantis. Ga pas daarna verder!

   [mvn -Prelease clean scm:update] update van de broncode in de werkdirectory

   [mvn -Prelease release:prepare -DdryRun=true] maakt een properties file aan met informatie
      voor de volgende stap; de dry run is alleen een oefening om je voor
      te bereiden op de gestelde vragen.

   [mvn -Prelease release:clean release:prepare] Verwijderd evt. de eerder 
        gemaakte maven-release-plugin properties en
        maakt een tag aan in de repository en update de snapshot versie.

   [mvn -Prelease release:perform] commit en deploy de release; maven maakt een tag aan in de source repository
       voor deze release en deployed de release naar de gedefinieerde maven repository. 
       
       <<LET OP:>> als je geen schrijfrechten hebt in de gedefinieerde maven repository 
	   (duif.net svn repository <<<duif-repo>>>) kun je dus geen release maken!

   []

  opties tijdens <<<release:prepare>>> fase:

   * <<<-DpreparationGoals=clean>>> om bijv. prep goals zoals unit test over te slaan.

   * <<<-DdryRun=true>>> doet een dry run van het comando; er worden geen veranderingen in de source 
   repository gemaakt.

   []
   
  Met behulp van de release notes functie in Jira kunnen release notes worden aangemaakt in verschillende formaten. 
  Zie: {{{http://????????????????/secure/ConfigureReleaseNote.jspa?projectId=10220}hier}}. 
  Dit moet gedaan worden voordat de release met maven wordt gemaakt zodat eea ook netjes in subversion 
  terecht komt. Tevens moet na het maken van de release met Maven de release worden gedaan in Jira, 
  dit vlagt de artifacts en componenten als released. 
  Na het maken van een release is er nog geen fileset voor distributie/installatie, dat is 
  {{{./ontwikkelhandleiding.html#Distributie_fileset_bouwen}hieronder}} beschreven.
